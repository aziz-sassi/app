{"ast":null,"code":"import React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { getDayNames } from \"../../utils/date\";\nimport { getMonthDays, areEqual } from \"../utils\";\nimport WeekDays from \"../WeekDays\";\nimport Day from \"../Day\";\nvar styles = StyleSheet.create({\n  weekContainer: {\n    flexDirection: 'row'\n  }\n});\nexport default React.memo(function (props) {\n  var month = props.month,\n      year = props.year,\n      onPress = props.onPress,\n      _props$locale = props.locale,\n      locale = _props$locale === void 0 ? 'en' : _props$locale,\n      dayNames = props.dayNames,\n      showWeekdays = props.showWeekdays,\n      _props$disabledDays = props.disabledDays,\n      disabledDays = _props$disabledDays === void 0 ? {} : _props$disabledDays,\n      _props$disableRange = props.disableRange,\n      disableRange = _props$disableRange === void 0 ? false : _props$disableRange,\n      _props$disableOffsetD = props.disableOffsetDays,\n      disableOffsetDays = _props$disableOffsetD === void 0 ? false : _props$disableOffsetD,\n      _props$firstDayMonday = props.firstDayMonday,\n      firstDayMonday = _props$firstDayMonday === void 0 ? true : _props$firstDayMonday,\n      startDate = props.startDate,\n      endDate = props.endDate,\n      minDate = props.minDate,\n      maxDate = props.maxDate,\n      _props$markedDays = props.markedDays,\n      markedDays = _props$markedDays === void 0 ? {} : _props$markedDays,\n      _props$theme = props.theme,\n      theme = _props$theme === void 0 ? {} : _props$theme,\n      renderDayContent = props.renderDayContent;\n  var DAY_NAMES = Array.isArray(dayNames) && dayNames.length === 7 ? dayNames : getDayNames(locale, firstDayMonday);\n  var days = getMonthDays(month, year, firstDayMonday, disableRange, disabledDays, disableOffsetDays, startDate, endDate, minDate, maxDate);\n  var weeks = [];\n\n  while (days.length) {\n    weeks.push(days.splice(0, 7));\n  }\n\n  return React.createElement(React.Fragment, null, showWeekdays && React.createElement(WeekDays, {\n    days: DAY_NAMES,\n    theme: theme\n  }), weeks.map(function (week, index) {\n    return React.createElement(View, {\n      key: String(index),\n      style: styles.weekContainer\n    }, week.map(function (day) {\n      return React.createElement(Day, {\n        key: day.key,\n        item: day,\n        dots: markedDays[day.id] ? markedDays[day.id].dots : [],\n        onPress: onPress,\n        theme: theme,\n        renderDayContent: renderDayContent\n      });\n    }));\n  }));\n}, areEqual);","map":{"version":3,"sources":["index.tsx"],"names":["styles","weekContainer","flexDirection","props","locale","disabledDays","disableRange","disableOffsetDays","firstDayMonday","markedDays","theme","renderDayContent","DAY_NAMES","Array","dayNames","getDayNames","days","getMonthDays","weeks","showWeekdays","String","day"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { DayType, MonthProps } from '../../types';\nimport { getDayNames } from '../../utils/date';\nimport { getMonthDays, areEqual } from '../utils';\nimport WeekDays from '../WeekDays';\nimport Day from '../Day';\n\nconst styles = StyleSheet.create({\n  weekContainer: {\n    flexDirection: 'row',\n  },\n});\n\nexport default React.memo<MonthProps>((props: MonthProps) => {\n  const {\n    month,\n    year,\n    onPress,\n    locale = 'en',\n    dayNames,\n    showWeekdays,\n    disabledDays = {},\n    disableRange = false,\n    disableOffsetDays = false,\n    firstDayMonday = true,\n    startDate,\n    endDate,\n    minDate,\n    maxDate,\n    markedDays = {},\n    theme = {},\n    renderDayContent,\n  } = props;\n\n  const DAY_NAMES =\n    Array.isArray(dayNames) && dayNames.length === 7\n      ? dayNames\n      : getDayNames(locale, firstDayMonday);\n\n  const days = getMonthDays(\n    month,\n    year,\n    firstDayMonday,\n    disableRange,\n    disabledDays,\n    disableOffsetDays,\n    startDate,\n    endDate,\n    minDate,\n    maxDate\n  );\n\n  const weeks = [];\n\n  while (days.length) {\n    weeks.push(days.splice(0, 7));\n  }\n\n  return (\n    <>\n      {showWeekdays && <WeekDays days={DAY_NAMES} theme={theme} />}\n      {weeks.map((week: DayType[], index: number) => (\n        <View key={String(index)} style={styles.weekContainer}>\n          {week.map((day: DayType) => (\n            <Day\n              key={day.key}\n              item={day}\n              dots={markedDays[day.id] ? markedDays[day.id].dots : []}\n              onPress={onPress}\n              theme={theme}\n              renderDayContent={renderDayContent}\n            />\n          ))}\n        </View>\n      ))}\n    </>\n  );\n}, areEqual);\n"]},"metadata":{},"sourceType":"module"}