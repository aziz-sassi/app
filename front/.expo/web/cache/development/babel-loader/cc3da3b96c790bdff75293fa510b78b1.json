{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useCallback, useRef, useState, useMemo, forwardRef } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport moment from 'moment';\nimport Month from \"./Month\";\nimport useMonths from \"../hooks/use-months\";\nimport useRange from \"../hooks/use-range\";\nimport { getMonthIndex } from \"../utils/date\";\nvar NUMBER_OF_MONTHS = 12;\nvar MONTH_HEIGHT = 370;\nvar INITIAL_LIST_SIZE = 2;\nvar VIEWABLE_RANGE_OFFSET = 5;\nvar VIEWABILITY_CONFIG = {\n  waitForInteraction: true,\n  itemVisiblePercentThreshold: 10,\n  minimumViewTime: 32\n};\nvar Calendar = forwardRef(function (props, ref) {\n  var _props$numberOfMonths = props.numberOfMonths,\n      numberOfMonths = _props$numberOfMonths === void 0 ? NUMBER_OF_MONTHS : _props$numberOfMonths,\n      _props$startingMonth = props.startingMonth,\n      startingMonth = _props$startingMonth === void 0 ? moment().format('YYYY-MM-DD') : _props$startingMonth,\n      _props$initialListSiz = props.initialListSize,\n      initialListSize = _props$initialListSiz === void 0 ? INITIAL_LIST_SIZE : _props$initialListSiz,\n      _props$showWeekdays = props.showWeekdays,\n      showWeekdays = _props$showWeekdays === void 0 ? true : _props$showWeekdays,\n      _props$showMonthTitle = props.showMonthTitle,\n      showMonthTitle = _props$showMonthTitle === void 0 ? true : _props$showMonthTitle,\n      _props$theme = props.theme,\n      theme = _props$theme === void 0 ? {} : _props$theme,\n      _props$locale = props.locale,\n      locale = _props$locale === void 0 ? 'en' : _props$locale,\n      _props$disableRange = props.disableRange,\n      disableRange = _props$disableRange === void 0 ? false : _props$disableRange,\n      _props$firstDayMonday = props.firstDayMonday,\n      firstDayMonday = _props$firstDayMonday === void 0 ? false : _props$firstDayMonday,\n      _props$monthHeight = props.monthHeight,\n      monthHeight = _props$monthHeight === void 0 ? MONTH_HEIGHT : _props$monthHeight,\n      _props$disableOffsetD = props.disableOffsetDays,\n      disableOffsetDays = _props$disableOffsetD === void 0 ? false : _props$disableOffsetD,\n      _props$viewableRangeO = props.viewableRangeOffset,\n      viewableRangeOffset = _props$viewableRangeO === void 0 ? VIEWABLE_RANGE_OFFSET : _props$viewableRangeO,\n      monthNames = props.monthNames,\n      onPress = props.onPress,\n      dayNames = props.dayNames,\n      startDate = props.startDate,\n      endDate = props.endDate;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      firstViewableIndex = _useState2[0],\n      setFirstViewableIndex = _useState2[1];\n\n  var _useState3 = useState(INITIAL_LIST_SIZE + viewableRangeOffset),\n      _useState4 = _slicedToArray(_useState3, 2),\n      lastViewableIndex = _useState4[0],\n      setLastViewableIndex = _useState4[1];\n\n  var _useMonths = useMonths({\n    numberOfMonths: numberOfMonths,\n    startingMonth: startingMonth\n  }),\n      months = _useMonths.months,\n      firstMonthToRender = _useMonths.firstMonth;\n\n  var _useRange = useRange({\n    startDate: startDate,\n    endDate: endDate,\n    firstMonthToRender: firstMonthToRender,\n    numberOfMonths: numberOfMonths\n  }),\n      localStartDate = _useRange.start,\n      localEndDate = _useRange.end;\n\n  var firstMonthIndex = useMemo(function () {\n    if (localStartDate) {\n      var monthIndex = getMonthIndex(firstMonthToRender, localStartDate, months, numberOfMonths);\n\n      if (monthIndex !== null) {\n        return monthIndex;\n      }\n    }\n\n    return 0;\n  }, [firstMonthToRender, localStartDate, months, numberOfMonths]);\n  var getItemLayout = useCallback(function (_data, index) {\n    return {\n      length: monthHeight,\n      offset: monthHeight * index,\n      index: index\n    };\n  }, [monthHeight]);\n  var keyExtractor = useCallback(function (_item, index) {\n    return String(index);\n  }, []);\n  var onViewableItemsChanged = useCallback(function (info) {\n    if (props.viewableItemsChanged) {\n      props.viewableItemsChanged(info);\n    }\n\n    if (props.renderAllMonths) {\n      return;\n    }\n\n    var viewableItems = info.viewableItems;\n\n    if (viewableItems.length > 0) {\n      var firstViewableItem = viewableItems[0],\n          l = viewableItems.length,\n          lastViewableItem = viewableItems[l - 1];\n\n      if (firstViewableIndex !== firstViewableItem.index || lastViewableIndex !== lastViewableItem.index) {\n        setFirstViewableIndex(firstViewableItem.index);\n        setLastViewableIndex(lastViewableItem.index + VIEWABLE_RANGE_OFFSET);\n      }\n    }\n  }, [firstViewableIndex, lastViewableIndex, props]);\n  var viewabilityConfigCallbackPairs = useRef([{\n    viewabilityConfig: VIEWABILITY_CONFIG,\n    onViewableItemsChanged: onViewableItemsChanged\n  }]);\n  var handlePress = useCallback(function (date) {\n    if (onPress) {\n      onPress(date);\n    }\n  }, [onPress]);\n  var renderMonth = useCallback(function (_ref) {\n    var index = _ref.index;\n    var month = moment(firstMonthToRender).add(index, 'months');\n    return React.createElement(Month, {\n      month: month.month(),\n      year: month.year(),\n      index: index,\n      firstMonthToRender: firstMonthToRender,\n      monthNames: monthNames,\n      onPress: handlePress,\n      theme: theme,\n      renderAllMonths: props.renderAllMonths,\n      showWeekdays: showWeekdays,\n      showMonthTitle: showMonthTitle,\n      locale: locale,\n      dayNames: dayNames,\n      height: monthHeight,\n      firstDayMonday: firstDayMonday,\n      renderDayContent: props.renderDayContent,\n      markedDays: props.markedDays,\n      minDate: props.minDate,\n      maxDate: props.maxDate,\n      startDate: localStartDate,\n      endDate: localEndDate,\n      disableRange: disableRange,\n      disabledDays: props.disabledDays,\n      disableOffsetDays: disableOffsetDays,\n      firstViewableIndex: firstViewableIndex,\n      lastViewableIndex: lastViewableIndex,\n      viewableRangeOffset: viewableRangeOffset\n    });\n  }, [dayNames, disableOffsetDays, disableRange, firstDayMonday, firstMonthToRender, firstViewableIndex, handlePress, lastViewableIndex, localEndDate, localStartDate, locale, monthHeight, monthNames, props.disabledDays, props.markedDays, props.maxDate, props.minDate, props.renderAllMonths, props.renderDayContent, showMonthTitle, showWeekdays, theme, viewableRangeOffset]);\n  var isWeb = Platform.OS === 'web';\n  var initialNumToRender = isWeb ? numberOfMonths : initialListSize;\n  return React.createElement(FlatList, {\n    getItemLayout: !isWeb ? getItemLayout : undefined,\n    initialScrollIndex: !isWeb ? firstMonthIndex : 0,\n    removeClippedSubviews: true,\n    initialNumToRender: initialNumToRender,\n    keyExtractor: keyExtractor,\n    viewabilityConfigCallbackPairs: viewabilityConfigCallbackPairs.current,\n    renderItem: renderMonth,\n    data: months,\n    ref: ref\n  });\n});\nCalendar.displayName = 'Calendar';\nexport default Calendar;","map":{"version":3,"sources":["Calendar.tsx"],"names":["NUMBER_OF_MONTHS","MONTH_HEIGHT","INITIAL_LIST_SIZE","VIEWABLE_RANGE_OFFSET","VIEWABILITY_CONFIG","waitForInteraction","itemVisiblePercentThreshold","minimumViewTime","Calendar","forwardRef","numberOfMonths","startingMonth","moment","initialListSize","showWeekdays","showMonthTitle","theme","locale","disableRange","firstDayMonday","monthHeight","disableOffsetDays","viewableRangeOffset","endDate","useState","firstMonth","firstMonthToRender","useMonths","start","end","localEndDate","useRange","startDate","firstMonthIndex","useMemo","monthIndex","getMonthIndex","getItemLayout","useCallback","length","offset","index","keyExtractor","String","onViewableItemsChanged","info","props","viewableItems","l","lastViewableItem","firstViewableIndex","firstViewableItem","lastViewableIndex","setFirstViewableIndex","setLastViewableIndex","viewabilityConfigCallbackPairs","useRef","viewabilityConfig","handlePress","date","onPress","renderMonth","month","isWeb","Platform","initialNumToRender","ref"],"mappings":"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","sourcesContent":["import React, {\n  useCallback,\n  useRef,\n  useState,\n  useMemo,\n  forwardRef,\n  Ref,\n} from 'react';\nimport { FlatList, Platform } from 'react-native';\nimport moment from 'moment';\n\nimport Month from './Month';\nimport useMonths from '../hooks/use-months';\nimport useRange from '../hooks/use-range';\nimport { getMonthIndex } from '../utils/date';\nimport { CalendarProps, ViewableItemsType } from '../types';\n\nconst NUMBER_OF_MONTHS = 12;\nconst MONTH_HEIGHT = 370;\nconst INITIAL_LIST_SIZE = 2;\nconst VIEWABLE_RANGE_OFFSET = 5;\n\nconst VIEWABILITY_CONFIG = {\n  waitForInteraction: true,\n  itemVisiblePercentThreshold: 10,\n  minimumViewTime: 32,\n};\n\nconst Calendar = forwardRef((props: CalendarProps, ref: Ref<FlatList>) => {\n  const {\n    numberOfMonths = NUMBER_OF_MONTHS,\n    startingMonth = moment().format('YYYY-MM-DD'),\n    initialListSize = INITIAL_LIST_SIZE,\n    showWeekdays = true,\n    showMonthTitle = true,\n    theme = {},\n    locale = 'en',\n    disableRange = false,\n    firstDayMonday = false,\n    monthHeight = MONTH_HEIGHT,\n    disableOffsetDays = false,\n    viewableRangeOffset = VIEWABLE_RANGE_OFFSET,\n    monthNames,\n    onPress,\n    dayNames,\n    startDate,\n    endDate,\n  } = props;\n\n  const [firstViewableIndex, setFirstViewableIndex] = useState(0);\n  const [lastViewableIndex, setLastViewableIndex] = useState(\n    INITIAL_LIST_SIZE + viewableRangeOffset!\n  );\n\n  const { months, firstMonth: firstMonthToRender } = useMonths({\n    numberOfMonths,\n    startingMonth,\n  });\n\n  const { start: localStartDate, end: localEndDate } = useRange({\n    startDate,\n    endDate,\n    firstMonthToRender,\n    numberOfMonths,\n  });\n\n  const firstMonthIndex = useMemo(() => {\n    if (localStartDate) {\n      const monthIndex = getMonthIndex(\n        firstMonthToRender,\n        localStartDate,\n        months,\n        numberOfMonths\n      );\n\n      if (monthIndex !== null) {\n        return monthIndex;\n      }\n    }\n\n    return 0;\n  }, [firstMonthToRender, localStartDate, months, numberOfMonths]);\n\n  const getItemLayout = useCallback(\n    (\n      _data: any,\n      index: number\n    ): { length: number; offset: number; index: number } => ({\n      length: monthHeight,\n      offset: monthHeight * index,\n      index,\n    }),\n    [monthHeight]\n  );\n\n  const keyExtractor = useCallback(\n    (_item: any, index: number): string => String(index),\n    []\n  );\n\n  const onViewableItemsChanged = useCallback(\n    (info: ViewableItemsType) => {\n      if (props.viewableItemsChanged) {\n        props.viewableItemsChanged(info);\n      }\n\n      if (props.renderAllMonths) {\n        return;\n      }\n\n      const { viewableItems } = info;\n\n      if (viewableItems.length > 0) {\n        const {\n          0: firstViewableItem,\n          length: l,\n          [l - 1]: lastViewableItem,\n        } = viewableItems;\n\n        if (\n          firstViewableIndex !== firstViewableItem.index ||\n          lastViewableIndex !== lastViewableItem.index\n        ) {\n          setFirstViewableIndex(firstViewableItem.index!);\n          setLastViewableIndex(lastViewableItem.index! + VIEWABLE_RANGE_OFFSET);\n        }\n      }\n    },\n    [firstViewableIndex, lastViewableIndex, props]\n  );\n\n  const viewabilityConfigCallbackPairs = useRef([\n    {\n      viewabilityConfig: VIEWABILITY_CONFIG,\n      onViewableItemsChanged,\n    },\n  ]);\n\n  const handlePress = useCallback(\n    (date: Date) => {\n      if (onPress) {\n        onPress(date);\n      }\n    },\n    [onPress]\n  );\n\n  const renderMonth = useCallback(\n    ({ index }: { index: number }) => {\n      const month = moment(firstMonthToRender).add(index, 'months');\n\n      return (\n        <Month\n          month={month.month()}\n          year={month.year()}\n          index={index}\n          firstMonthToRender={firstMonthToRender}\n          monthNames={monthNames}\n          onPress={handlePress}\n          theme={theme}\n          renderAllMonths={props.renderAllMonths}\n          showWeekdays={showWeekdays}\n          showMonthTitle={showMonthTitle}\n          locale={locale}\n          dayNames={dayNames}\n          height={monthHeight}\n          firstDayMonday={firstDayMonday}\n          renderDayContent={props.renderDayContent}\n          markedDays={props.markedDays}\n          minDate={props.minDate}\n          maxDate={props.maxDate}\n          startDate={localStartDate}\n          endDate={localEndDate}\n          disableRange={disableRange}\n          disabledDays={props.disabledDays}\n          disableOffsetDays={disableOffsetDays}\n          firstViewableIndex={firstViewableIndex}\n          lastViewableIndex={lastViewableIndex}\n          viewableRangeOffset={viewableRangeOffset!}\n        />\n      );\n    },\n    [\n      dayNames,\n      disableOffsetDays,\n      disableRange,\n      firstDayMonday,\n      firstMonthToRender,\n      firstViewableIndex,\n      handlePress,\n      lastViewableIndex,\n      localEndDate,\n      localStartDate,\n      locale,\n      monthHeight,\n      monthNames,\n      props.disabledDays,\n      props.markedDays,\n      props.maxDate,\n      props.minDate,\n      props.renderAllMonths,\n      props.renderDayContent,\n      showMonthTitle,\n      showWeekdays,\n      theme,\n      viewableRangeOffset,\n    ]\n  );\n\n  const isWeb = Platform.OS === 'web';\n  const initialNumToRender = isWeb ? numberOfMonths : initialListSize;\n\n  return (\n    <FlatList\n      getItemLayout={!isWeb ? getItemLayout : undefined}\n      initialScrollIndex={!isWeb ? firstMonthIndex : 0}\n      removeClippedSubviews\n      initialNumToRender={initialNumToRender}\n      keyExtractor={keyExtractor}\n      viewabilityConfigCallbackPairs={viewabilityConfigCallbackPairs.current}\n      renderItem={renderMonth}\n      data={months}\n      ref={ref}\n    />\n  );\n});\n\nCalendar.displayName = 'Calendar';\n\nexport default Calendar;\n"]},"metadata":{},"sourceType":"module"}