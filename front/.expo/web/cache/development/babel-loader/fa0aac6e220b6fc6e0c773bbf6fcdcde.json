{"ast":null,"code":"import { useMemo } from 'react';\nimport moment from 'moment';\nimport { isValidDate } from \"../utils/date\";\nexport default function useRange(_ref) {\n  var startDate = _ref.startDate,\n      endDate = _ref.endDate,\n      numberOfMonths = _ref.numberOfMonths,\n      firstMonthToRender = _ref.firstMonthToRender;\n  return useMemo(function () {\n    var start;\n    var lastMonth = moment(firstMonthToRender).add(numberOfMonths, 'months').toDate();\n\n    if (startDate && isValidDate(new Date(startDate))) {\n      start = moment(startDate, 'YYYY-MM-DD').toDate();\n\n      if (start > lastMonth) {\n        start = undefined;\n      }\n    }\n\n    var end = endDate && isValidDate(new Date(endDate)) && endDate <= lastMonth ? moment(endDate, 'YYYY-MM-DD').toDate() : undefined;\n    return {\n      start: start,\n      end: end\n    };\n  }, [endDate, firstMonthToRender, numberOfMonths, startDate]);\n}","map":{"version":3,"sources":["use-range.ts"],"names":["firstMonthToRender","useMemo","lastMonth","moment","startDate","isValidDate","start","end","endDate"],"mappings":"AAAA,SAAA,OAAA,QAAA,OAAA;AACA,OAAA,MAAA,MAAA,QAAA;AAEA,SAAA,WAAA;AAaA,eAAe,SAAA,QAAA,OAKG;AAAA,MALe,SAKf,QALe,SAKf;AAAA,MALe,OAKf,QALe,OAKf;AAAA,MALe,cAKf,QALe,cAKf;AAAA,MADhBA,kBACgB,QADhBA,kBACgB;AAChB,SAAOC,OAAO,CAAC,YAAM;AACnB,QAAA,KAAA;AACA,QAAMC,SAAS,GAAGC,MAAM,CAANA,kBAAM,CAANA,CAAAA,GAAAA,CAAAA,cAAAA,EAAAA,QAAAA,EAAlB,MAAkBA,EAAlB;;AAIA,QAAIC,SAAS,IAAIC,WAAW,CAAC,IAAA,IAAA,CAA7B,SAA6B,CAAD,CAA5B,EAAmD;AACjDC,MAAAA,KAAK,GAAGH,MAAM,CAAA,SAAA,EAANA,YAAM,CAANA,CAARG,MAAQH,EAARG;;AAEA,UAAIA,KAAK,GAAT,SAAA,EAAuB;AACrBA,QAAAA,KAAK,GAALA,SAAAA;AACD;AACF;;AAED,QAAIC,GAAG,GACLC,OAAO,IAAIH,WAAW,CAAC,IAAA,IAAA,CAAvBG,OAAuB,CAAD,CAAtBA,IAA6CA,OAAO,IAApDA,SAAAA,GACIL,MAAM,CAAA,OAAA,EAANA,YAAM,CAANA,CADJK,MACIL,EADJK,GADF,SAAA;AAKA,WAAO;AACLF,MAAAA,KADK,EACLA,KADK;AAELC,MAAAA,GAAAA,EAAAA;AAFK,KAAP;AAnBY,GAAA,EAuBX,CAAA,OAAA,EAAA,kBAAA,EAAA,cAAA,EAvBH,SAuBG,CAvBW,CAAd;AAwBD","sourcesContent":["import { useMemo } from 'react';\nimport moment from 'moment';\n\nimport { isValidDate } from '../utils/date';\nimport { CalendarProps } from '../types';\n\ninterface Input\n  extends Pick<CalendarProps, 'startDate' | 'endDate' | 'numberOfMonths'> {\n  firstMonthToRender: Date;\n}\n\ninterface Result {\n  start?: Date;\n  end?: Date;\n}\n\nexport default function useRange({\n  startDate,\n  endDate,\n  numberOfMonths,\n  firstMonthToRender,\n}: Input): Result {\n  return useMemo(() => {\n    let start: Date | undefined;\n    const lastMonth = moment(firstMonthToRender)\n      .add(numberOfMonths, 'months')\n      .toDate();\n\n    if (startDate && isValidDate(new Date(startDate))) {\n      start = moment(startDate, 'YYYY-MM-DD').toDate();\n\n      if (start > lastMonth) {\n        start = undefined;\n      }\n    }\n\n    let end =\n      endDate && isValidDate(new Date(endDate)) && endDate <= lastMonth\n        ? moment(endDate, 'YYYY-MM-DD').toDate()\n        : undefined;\n\n    return {\n      start,\n      end,\n    };\n  }, [endDate, firstMonthToRender, numberOfMonths, startDate]);\n}\n"]},"metadata":{},"sourceType":"module"}