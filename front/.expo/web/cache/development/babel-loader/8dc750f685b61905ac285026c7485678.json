{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { useCallback, useMemo } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Dot from \"../Dot\";\nvar styles = StyleSheet.create({\n  activeDate: {\n    backgroundColor: '#3b5998'\n  },\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'white',\n    flex: 1,\n    marginVertical: 5,\n    paddingVertical: 10\n  },\n  content: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  dotsContainer: {\n    position: 'absolute',\n    bottom: 3,\n    flexDirection: 'row'\n  },\n  endDate: {\n    borderBottomRightRadius: 60,\n    borderTopRightRadius: 60\n  },\n  startDate: {\n    borderBottomLeftRadius: 60,\n    borderTopLeftRadius: 60\n  },\n  nonTouchableDayText: {\n    color: '#d3d3d3'\n  }\n});\nvar NonTouchableDay = React.memo(function (props) {\n  var isMonthDate = props.isMonthDate,\n      isActive = props.isActive,\n      isOutOfRange = props.isOutOfRange,\n      isStartDate = props.isStartDate,\n      isEndDate = props.isEndDate,\n      theme = props.theme,\n      date = props.date,\n      isToday = props.isToday;\n  return React.createElement(View, {\n    style: [styles.container, theme.dayContainerStyle, theme.nonTouchableDayContainerStyle, isToday && !isActive ? theme.todayContainerStyle : {}, isActive ? styles.activeDate : {}, isActive ? theme.activeDayContainerStyle : {}, isOutOfRange ? theme.dayOutOfRangeContainerStyle : {}, isEndDate ? styles.endDate : {}, isEndDate ? theme.endDateContainerStyle : {}, isStartDate ? styles.startDate : {}, isStartDate ? theme.startDateContainerStyle : {}]\n  }, React.createElement(View, {\n    style: [styles.content, theme.dayContentStyle, isActive ? theme.activeDayContentStyle : {}]\n  }, React.createElement(Text, {\n    style: [styles.nonTouchableDayText, theme.nonTouchableDayTextStyle, isMonthDate ? theme.nonTouchableLastMonthDayTextStyle : {}, isToday ? theme.todayTextStyle : {}, isOutOfRange ? theme.dayOutOfRangeTextStyle : {}]\n  }, date.getDate())));\n}, function (prevProps, nextProps) {\n  return prevProps.isActive === nextProps.isActive && prevProps.isVisible === nextProps.isVisible && prevProps.isStartDate === nextProps.isStartDate && prevProps.isEndDate === nextProps.isEndDate;\n});\nvar Day = React.memo(function (props) {\n  var _props$item = props.item,\n      date = _props$item.date,\n      isVisible = _props$item.isVisible,\n      isActive = _props$item.isActive,\n      isStartDate = _props$item.isStartDate,\n      isEndDate = _props$item.isEndDate,\n      isMonthDate = _props$item.isMonthDate,\n      isOutOfRange = _props$item.isOutOfRange,\n      isToday = _props$item.isToday,\n      isHidden = _props$item.isHidden,\n      _props$dots = props.dots,\n      dots = _props$dots === void 0 ? [] : _props$dots,\n      theme = props.theme;\n  var dayTextStyle = useMemo(function () {\n    return {\n      color: isActive ? 'white' : 'black'\n    };\n  }, [isActive]);\n  var renderDot = useCallback(function (d, i) {\n    return React.createElement(Dot, _extends({\n      key: i.toString(),\n      active: isActive,\n      index: i\n    }, d, {\n      dotContainerStyle: theme.dotContainerStyle\n    }));\n  }, [isActive, theme.dotContainerStyle]);\n\n  if (isHidden) {\n    return React.createElement(View, {\n      style: [styles.container]\n    });\n  }\n\n  if (!isVisible) {\n    return React.createElement(NonTouchableDay, {\n      isActive: isActive,\n      date: date,\n      theme: theme,\n      isMonthDate: isMonthDate,\n      isOutOfRange: isOutOfRange,\n      isStartDate: isStartDate,\n      isEndDate: isEndDate,\n      isVisible: isVisible,\n      isToday: isToday\n    });\n  }\n\n  var finalDots = dots.slice(0, 3);\n  return React.createElement(TouchableOpacity, {\n    style: [styles.container, theme.dayContainerStyle, isToday && !isActive ? theme.todayContainerStyle : {}, isActive ? styles.activeDate : {}, isActive ? theme.activeDayContainerStyle : {}, isStartDate ? styles.startDate : {}, isStartDate ? theme.startDateContainerStyle : {}, isEndDate ? styles.endDate : {}, isEndDate ? theme.endDateContainerStyle : {}],\n    onPress: function onPress() {\n      return props.onPress(props.item.date);\n    }\n  }, props.renderDayContent ? props.renderDayContent(props.item) : React.createElement(View, {\n    style: [styles.content, theme.dayContentStyle, isActive ? theme.activeDayContentStyle : {}]\n  }, React.createElement(Text, {\n    style: [dayTextStyle, theme.dayTextStyle, isToday ? theme.todayTextStyle : {}, isActive ? theme.activeDayTextStyle : {}]\n  }, date.getDate()), React.createElement(View, {\n    style: styles.dotsContainer\n  }, finalDots.map(renderDot))));\n}, function (prevProps, nextProps) {\n  return prevProps.item.isActive === nextProps.item.isActive && prevProps.item.isVisible === nextProps.item.isVisible && prevProps.item.isStartDate === nextProps.item.isStartDate && prevProps.item.isEndDate === nextProps.item.isEndDate && prevProps.renderDayContent === nextProps.renderDayContent;\n});\nexport default Day;","map":{"version":3,"sources":["index.tsx"],"names":["styles","activeDate","backgroundColor","container","alignItems","justifyContent","flex","marginVertical","paddingVertical","content","dotsContainer","position","bottom","flexDirection","endDate","borderBottomRightRadius","borderTopRightRadius","startDate","borderBottomLeftRadius","borderTopLeftRadius","nonTouchableDayText","color","NonTouchableDay","props","isToday","theme","isActive","isOutOfRange","isEndDate","isStartDate","isMonthDate","date","prevProps","nextProps","Day","item","isHidden","dots","dayTextStyle","useMemo","renderDot","useCallback","i","dotContainerStyle","finalDots"],"mappings":"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","sourcesContent":["import React, { ReactElement, useCallback, useMemo } from 'react';\nimport { StyleSheet, TouchableOpacity, View, Text } from 'react-native';\nimport { DayType, ThemeType, DayDot } from '../../types';\nimport Dot from '../Dot';\n\nconst styles = StyleSheet.create({\n  activeDate: {\n    backgroundColor: '#3b5998',\n  },\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'white',\n    flex: 1,\n    marginVertical: 5,\n    paddingVertical: 10,\n  },\n  content: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  dotsContainer: { position: 'absolute', bottom: 3, flexDirection: 'row' },\n  endDate: {\n    borderBottomRightRadius: 60,\n    borderTopRightRadius: 60,\n  },\n  startDate: {\n    borderBottomLeftRadius: 60,\n    borderTopLeftRadius: 60,\n  },\n  nonTouchableDayText: { color: '#d3d3d3' },\n});\n\ninterface NonTouchableDayProps {\n  date: Date;\n  isActive: boolean;\n  isMonthDate: boolean;\n  isOutOfRange: boolean;\n  isStartDate: boolean;\n  isEndDate: boolean;\n  isVisible: boolean;\n  isToday: boolean;\n  theme: ThemeType;\n}\n\nconst NonTouchableDay = React.memo<NonTouchableDayProps>(\n  (props: NonTouchableDayProps) => {\n    const {\n      isMonthDate,\n      isActive,\n      isOutOfRange,\n      isStartDate,\n      isEndDate,\n      theme,\n      date,\n      isToday,\n    } = props;\n\n    return (\n      <View\n        style={[\n          styles.container,\n          theme.dayContainerStyle,\n          theme.nonTouchableDayContainerStyle,\n          isToday && !isActive ? theme.todayContainerStyle : {},\n          isActive ? styles.activeDate : {},\n          isActive ? theme.activeDayContainerStyle : {},\n          isOutOfRange ? theme.dayOutOfRangeContainerStyle : {},\n          isEndDate ? styles.endDate : {},\n          isEndDate ? theme.endDateContainerStyle : {},\n          isStartDate ? styles.startDate : {},\n          isStartDate ? theme.startDateContainerStyle : {},\n        ]}\n      >\n        <View\n          style={[\n            styles.content,\n            theme.dayContentStyle,\n            isActive ? theme.activeDayContentStyle : {},\n          ]}\n        >\n          <Text\n            style={[\n              styles.nonTouchableDayText,\n              theme.nonTouchableDayTextStyle,\n              isMonthDate ? theme.nonTouchableLastMonthDayTextStyle : {},\n              isToday ? theme.todayTextStyle : {},\n              isOutOfRange ? theme.dayOutOfRangeTextStyle : {},\n            ]}\n          >\n            {date.getDate()}\n          </Text>\n        </View>\n      </View>\n    );\n  },\n  (prevProps, nextProps) => {\n    return (\n      prevProps.isActive === nextProps.isActive &&\n      prevProps.isVisible === nextProps.isVisible &&\n      prevProps.isStartDate === nextProps.isStartDate &&\n      prevProps.isEndDate === nextProps.isEndDate\n    );\n  }\n);\n\ninterface Props {\n  onPress: (date: Date) => void;\n  dots?: DayDot[];\n  item: DayType;\n  theme: ThemeType;\n  renderDayContent?: (day: DayType) => ReactElement;\n}\n\nconst Day = React.memo<Props>(\n  (props: Props) => {\n    const {\n      item: {\n        date,\n        isVisible,\n        isActive,\n        isStartDate,\n        isEndDate,\n        isMonthDate,\n        isOutOfRange,\n        isToday,\n        isHidden,\n      },\n      dots = [],\n      theme,\n    } = props;\n\n    const dayTextStyle = useMemo(\n      () => ({\n        color: isActive ? 'white' : 'black',\n      }),\n      [isActive]\n    );\n\n    const renderDot = useCallback(\n      (d: DayDot, i) => {\n        return (\n          <Dot\n            key={i.toString()}\n            active={isActive}\n            index={i}\n            {...d}\n            dotContainerStyle={theme.dotContainerStyle}\n          />\n        );\n      },\n      [isActive, theme.dotContainerStyle]\n    );\n\n    if (isHidden) {\n      return <View style={[styles.container]} />;\n    }\n\n    if (!isVisible) {\n      return (\n        <NonTouchableDay\n          isActive={isActive}\n          date={date}\n          theme={theme}\n          isMonthDate={isMonthDate}\n          isOutOfRange={isOutOfRange}\n          isStartDate={isStartDate}\n          isEndDate={isEndDate}\n          isVisible={isVisible}\n          isToday={isToday}\n        />\n      );\n    }\n\n    // Should render a maximum of 3 dots\n    const finalDots = dots.slice(0, 3);\n\n    return (\n      <TouchableOpacity\n        style={[\n          styles.container,\n          theme.dayContainerStyle,\n          isToday && !isActive ? theme.todayContainerStyle : {},\n          isActive ? styles.activeDate : {},\n          isActive ? theme.activeDayContainerStyle : {},\n          isStartDate ? styles.startDate : {},\n          isStartDate ? theme.startDateContainerStyle : {},\n          isEndDate ? styles.endDate : {},\n          isEndDate ? theme.endDateContainerStyle : {},\n        ]}\n        onPress={() => props.onPress(props.item.date)}\n      >\n        {props.renderDayContent ? (\n          props.renderDayContent(props.item)\n        ) : (\n          <View\n            style={[\n              styles.content,\n              theme.dayContentStyle,\n              isActive ? theme.activeDayContentStyle : {},\n            ]}\n          >\n            <Text\n              style={[\n                dayTextStyle,\n                theme.dayTextStyle,\n                isToday ? theme.todayTextStyle : {},\n                isActive ? theme.activeDayTextStyle : {},\n              ]}\n            >\n              {date.getDate()}\n            </Text>\n            <View style={styles.dotsContainer}>{finalDots.map(renderDot)}</View>\n          </View>\n        )}\n      </TouchableOpacity>\n    );\n  },\n  (prevProps, nextProps) => {\n    return (\n      prevProps.item.isActive === nextProps.item.isActive &&\n      prevProps.item.isVisible === nextProps.item.isVisible &&\n      prevProps.item.isStartDate === nextProps.item.isStartDate &&\n      prevProps.item.isEndDate === nextProps.item.isEndDate &&\n      prevProps.renderDayContent === nextProps.renderDayContent\n    );\n  }\n);\n\nexport default Day;\n"]},"metadata":{},"sourceType":"module"}