{"ast":null,"code":"import moment from 'moment';\nexport function monthBetweenRange(month, start, end) {\n  var firstDayOfMonth = month.startOf('month').toDate();\n  var lastDayOfMonth = month.endOf('month').toDate();\n  return firstDayOfMonth <= end && firstDayOfMonth >= start || lastDayOfMonth >= start && lastDayOfMonth <= end || start <= lastDayOfMonth && end >= firstDayOfMonth;\n}\nexport function isMonthDrawn(year, month, start, end) {\n  if (start instanceof Date) {\n    start.setHours(0, 0, 0, 0);\n\n    if (end instanceof Date) {\n      end.setHours(0, 0, 0, 0);\n      var firstMonthDay = new Date(year, month, 0, 0, 0, 0, 0);\n      var lastMonthDay = new Date(year, month + 1, 0);\n      return firstMonthDay <= end && firstMonthDay >= start || lastMonthDay >= start && lastMonthDay <= end || start <= lastMonthDay && end >= firstMonthDay;\n    }\n\n    return start.getFullYear() === year && start.getMonth() === month;\n  }\n\n  return false;\n}\nexport function shouldRenderMonth(currentMonth, pervMinMax, nextMinMax) {\n  if (pervMinMax !== nextMinMax) {\n    if (pervMinMax) {\n      if (nextMinMax) {\n        if (moment(pervMinMax).isSame(currentMonth, 'month') || moment(nextMinMax).isSame(currentMonth, 'month')) {\n          return true;\n        }\n\n        var monthBetweenMinRange = pervMinMax < nextMinMax ? monthBetweenRange(currentMonth, moment(pervMinMax).toDate(), moment(nextMinMax).toDate()) : monthBetweenRange(currentMonth, moment(nextMinMax).toDate(), moment(pervMinMax).toDate());\n\n        if (monthBetweenMinRange) {\n          return true;\n        }\n      } else if (moment(pervMinMax).isSame(currentMonth, 'month')) {\n        return true;\n      }\n    } else if (moment(nextMinMax).isSame(currentMonth, 'month')) {\n      return true;\n    }\n  }\n\n  return false;\n}","map":{"version":3,"sources":["utils.tsx"],"names":["firstDayOfMonth","month","lastDayOfMonth","start","end","firstMonthDay","lastMonthDay","pervMinMax","moment","monthBetweenMinRange","monthBetweenRange"],"mappings":"AAAA,OAAA,MAAA,MAAA,QAAA;AAEA,OAAO,SAAA,iBAAA,CAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAkE;AACvE,MAAMA,eAAe,GAAGC,KAAK,CAALA,OAAAA,CAAAA,OAAAA,EAAxB,MAAwBA,EAAxB;AACA,MAAMC,cAAc,GAAGD,KAAK,CAALA,KAAAA,CAAAA,OAAAA,EAAvB,MAAuBA,EAAvB;AAEA,SACGD,eAAe,IAAfA,GAAAA,IAA0BA,eAAe,IAA1C,KAACA,IACAE,cAAc,IAAdA,KAAAA,IAA2BA,cAAc,IAD1C,GAACF,IAEAG,KAAK,IAALA,cAAAA,IAA2BC,GAAG,IAHjC,eAAA;AAKD;AAED,OAAO,SAAA,YAAA,CAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAKL;AACA,MAAID,KAAK,YAAT,IAAA,EAA2B;AACzBA,IAAAA,KAAK,CAALA,QAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA;;AACA,QAAIC,GAAG,YAAP,IAAA,EAAyB;AACvBA,MAAAA,GAAG,CAAHA,QAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA;AACA,UAAMC,aAAa,GAAG,IAAA,IAAA,CAAA,IAAA,EAAA,KAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAtB,CAAsB,CAAtB;AACA,UAAMC,YAAY,GAAG,IAAA,IAAA,CAAA,IAAA,EAAeL,KAAK,GAApB,CAAA,EAArB,CAAqB,CAArB;AAEA,aACGI,aAAa,IAAbA,GAAAA,IAAwBA,aAAa,IAAtC,KAACA,IACAC,YAAY,IAAZA,KAAAA,IAAyBA,YAAY,IADtC,GAACD,IAEAF,KAAK,IAALA,YAAAA,IAAyBC,GAAG,IAH/B,aAAA;AAKD;;AAED,WAAOD,KAAK,CAALA,WAAAA,OAAAA,IAAAA,IAAgCA,KAAK,CAALA,QAAAA,OAAvC,KAAA;AACD;;AAED,SAAA,KAAA;AACD;AAED,OAAO,SAAA,iBAAA,CAAA,YAAA,EAAA,UAAA,EAAA,UAAA,EAIL;AACA,MAAII,UAAU,KAAd,UAAA,EAA+B;AAC7B,QAAA,UAAA,EAAgB;AACd,UAAA,UAAA,EAAgB;AACd,YACEC,MAAM,CAANA,UAAM,CAANA,CAAAA,MAAAA,CAAAA,YAAAA,EAAAA,OAAAA,KACAA,MAAM,CAANA,UAAM,CAANA,CAAAA,MAAAA,CAAAA,YAAAA,EAFF,OAEEA,CAFF,EAGE;AACA,iBAAA,IAAA;AACD;;AAED,YAAMC,oBAAoB,GACxBF,UAAU,GAAVA,UAAAA,GACIG,iBAAiB,CAAA,YAAA,EAEfF,MAAM,CAANA,UAAM,CAANA,CAFe,MAEfA,EAFe,EAGfA,MAAM,CAANA,UAAM,CAANA,CAJND,MAIMC,EAHe,CADrBD,GAMIG,iBAAiB,CAAA,YAAA,EAEfF,MAAM,CAANA,UAAM,CAANA,CAFe,MAEfA,EAFe,EAGfA,MAAM,CAANA,UAAM,CAANA,CAVR,MAUQA,EAHe,CAPvB;;AAaA,YAAA,oBAAA,EAA0B;AACxB,iBAAA,IAAA;AACD;AAvBH,OAAA,MAwBO,IAAIA,MAAM,CAANA,UAAM,CAANA,CAAAA,MAAAA,CAAAA,YAAAA,EAAJ,OAAIA,CAAJ,EAAsD;AAC3D,eAAA,IAAA;AACD;AA3BH,KAAA,MA4BO,IAAIA,MAAM,CAANA,UAAM,CAANA,CAAAA,MAAAA,CAAAA,YAAAA,EAAJ,OAAIA,CAAJ,EAAsD;AAC3D,aAAA,IAAA;AACD;AACF;;AAED,SAAA,KAAA;AACD","sourcesContent":["import moment, { Moment } from 'moment';\n\nexport function monthBetweenRange(month: Moment, start: Date, end: Date) {\n  const firstDayOfMonth = month.startOf('month').toDate();\n  const lastDayOfMonth = month.endOf('month').toDate();\n\n  return (\n    (firstDayOfMonth <= end && firstDayOfMonth >= start) ||\n    (lastDayOfMonth >= start && lastDayOfMonth <= end) ||\n    (start <= lastDayOfMonth && end >= firstDayOfMonth)\n  );\n}\n\nexport function isMonthDrawn(\n  year: number,\n  month: number,\n  start?: Date,\n  end?: Date\n) {\n  if (start instanceof Date) {\n    start.setHours(0, 0, 0, 0);\n    if (end instanceof Date) {\n      end.setHours(0, 0, 0, 0);\n      const firstMonthDay = new Date(year, month, 0, 0, 0, 0, 0);\n      const lastMonthDay = new Date(year, month + 1, 0);\n\n      return (\n        (firstMonthDay <= end && firstMonthDay >= start) ||\n        (lastMonthDay >= start && lastMonthDay <= end) ||\n        (start <= lastMonthDay && end >= firstMonthDay)\n      );\n    }\n\n    return start.getFullYear() === year && start.getMonth() === month;\n  }\n\n  return false;\n}\n\nexport function shouldRenderMonth(\n  currentMonth: Moment,\n  pervMinMax?: Date,\n  nextMinMax?: Date\n) {\n  if (pervMinMax !== nextMinMax) {\n    if (pervMinMax) {\n      if (nextMinMax) {\n        if (\n          moment(pervMinMax).isSame(currentMonth, 'month') ||\n          moment(nextMinMax).isSame(currentMonth, 'month')\n        ) {\n          return true;\n        }\n\n        const monthBetweenMinRange =\n          pervMinMax < nextMinMax\n            ? monthBetweenRange(\n                currentMonth,\n                moment(pervMinMax).toDate(),\n                moment(nextMinMax).toDate()\n              )\n            : monthBetweenRange(\n                currentMonth,\n                moment(nextMinMax).toDate(),\n                moment(pervMinMax).toDate()\n              );\n\n        if (monthBetweenMinRange) {\n          return true;\n        }\n      } else if (moment(pervMinMax).isSame(currentMonth, 'month')) {\n        return true;\n      }\n    } else if (moment(nextMinMax).isSame(currentMonth, 'month')) {\n      return true;\n    }\n  }\n\n  return false;\n}\n"]},"metadata":{},"sourceType":"module"}