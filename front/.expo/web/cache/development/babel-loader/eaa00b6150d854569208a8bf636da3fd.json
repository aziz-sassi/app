{"ast":null,"code":"import React from \"react\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport { themeColor, useTheme } from \"react-native-rapi-ui\";\nimport TabBarIcon from \"../components/utils/TabBarIcon\";\nimport TabBarText from \"../components/utils/TabBarText\";\nimport Profile from \"../screens/Profile\";\nimport Calendar from \"../screens/Calendar\";\nimport Home from \"../screens/Home\";\nimport login from \"../screens/login\";\nimport Signup from \"../screens/Signup\";\nimport Notifications from \"../screens/Notifications\";\nimport { colors } from \"../components/utils/styles\";\nimport { logInAsync } from \"expo-google-app-auth\";\nimport { ScreenStack } from \"react-native-screens\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar MainStack = createNativeStackNavigator();\n\nvar Main = function Main() {\n  return _jsxs(MainStack.Navigator, {\n    screenOptions: {\n      headerShown: false\n    },\n    children: [_jsx(MainStack.Screen, {\n      name: \"login\",\n      component: login\n    }), _jsx(MainStack.Screen, {\n      name: \"Signup\",\n      component: Signup\n    }), _jsx(MainStack.Screen, {\n      name: \"MainTabs\",\n      component: MainTabs\n    })]\n  });\n};\n\nvar Tabs = createBottomTabNavigator();\n\nvar MainTabs = function MainTabs() {\n  var _useTheme = useTheme(),\n      isDarkmode = _useTheme.isDarkmode;\n\n  return _jsxs(Tabs.Navigator, {\n    screenOptions: {\n      headerShown: false,\n      tabBarStyle: {\n        borderTopColor: isDarkmode ? themeColor.dark100 : \"#c0c0c0\",\n        backgroundColor: isDarkmode ? themeColor.dark200 : \"#ffffff\"\n      }\n    },\n    children: [_jsx(Tabs.Screen, {\n      name: \"Home\",\n      component: Home,\n      options: {\n        tabBarLabel: function tabBarLabel(_ref) {\n          var focused = _ref.focused;\n          return _jsx(TabBarText, {\n            focused: focused,\n            title: \"Home\"\n          });\n        },\n        tabBarIcon: function tabBarIcon(_ref2) {\n          var focused = _ref2.focused;\n          return _jsx(TabBarIcon, {\n            focused: focused,\n            icon: \"md-home\"\n          });\n        },\n        headerStyle: {\n          backgroundColor: \"red\"\n        },\n        headerTransparent: true,\n        headerTintColor: colors.primary\n      }\n    }), _jsx(Tabs.Screen, {\n      name: \"Profile\",\n      component: Profile,\n      options: {\n        tabBarLabel: function tabBarLabel(_ref3) {\n          var focused = _ref3.focused;\n          return _jsx(TabBarText, {\n            focused: focused,\n            title: \"Profile\"\n          });\n        },\n        tabBarIcon: function tabBarIcon(_ref4) {\n          var focused = _ref4.focused;\n          return _jsx(TabBarIcon, {\n            focused: focused,\n            icon: \"person\"\n          });\n        }\n      }\n    }), _jsx(Tabs.Screen, {\n      name: \"Calendar\",\n      component: Calendar,\n      options: {\n        tabBarLabel: function tabBarLabel(_ref5) {\n          var focused = _ref5.focused;\n          return _jsx(TabBarText, {\n            focused: focused,\n            title: \"Calendar\"\n          });\n        },\n        tabBarIcon: function tabBarIcon(_ref6) {\n          var focused = _ref6.focused;\n          return _jsx(TabBarIcon, {\n            focused: focused,\n            icon: \"calendar\"\n          });\n        }\n      }\n    }), _jsx(Tabs.Screen, {\n      name: \"Notifications\",\n      component: Notifications,\n      options: {\n        tabBarLabel: function tabBarLabel(_ref7) {\n          var focused = _ref7.focused;\n          return _jsx(TabBarText, {\n            focused: focused,\n            title: \"Notification\"\n          });\n        },\n        tabBarIcon: function tabBarIcon(_ref8) {\n          var focused = _ref8.focused;\n          return _jsx(TabBarIcon, {\n            focused: focused,\n            icon: \"ios-information-circle\"\n          });\n        }\n      }\n    })]\n  });\n};\n\nexport default (function () {\n  return _jsx(NavigationContainer, {\n    children: _jsx(Main, {})\n  });\n});","map":{"version":3,"sources":["C:/Users/mahdo/OneDrive/Bureau/cluby-/src/navigation/AppNavigator.js"],"names":["React","NavigationContainer","createNativeStackNavigator","createBottomTabNavigator","themeColor","useTheme","TabBarIcon","TabBarText","Profile","Calendar","Home","login","Signup","Notifications","colors","logInAsync","ScreenStack","MainStack","Main","headerShown","MainTabs","Tabs","isDarkmode","tabBarStyle","borderTopColor","dark100","backgroundColor","dark200","tabBarLabel","focused","tabBarIcon","headerStyle","headerTransparent","headerTintColor","primary"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { NavigationContainer } from \"@react-navigation/native\";\r\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\r\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\r\n\r\nimport { themeColor, useTheme } from \"react-native-rapi-ui\";\r\nimport TabBarIcon from \"../components/utils/TabBarIcon\";\r\nimport TabBarText from \"../components/utils/TabBarText\";\r\n\r\nimport Profile from \"../screens/Profile\";\r\nimport Calendar from \"../screens/Calendar\";\r\nimport Home from \"../screens/Home\";\r\nimport login from \"../screens/login\";\r\nimport Signup from \"../screens/Signup\";\r\n\r\n\r\nimport Notifications from \"../screens/Notifications\";\r\n\r\n\r\nimport { colors } from \"../components/utils/styles\";\r\nimport { logInAsync } from \"expo-google-app-auth\";\r\nimport { ScreenStack } from \"react-native-screens\";\r\n\r\nconst MainStack = createNativeStackNavigator();\r\nconst Main = () => {\r\n  return (\r\n    <MainStack.Navigator\r\n      screenOptions={{\r\n        headerShown: false,\r\n      }}\r\n    >\r\n      <MainStack.Screen name=\"login\" component={login} />\r\n      <MainStack.Screen name =\"Signup\" component ={Signup} />\r\n      <MainStack.Screen name =\"MainTabs\" component ={MainTabs} />\r\n      \r\n    </MainStack.Navigator>\r\n  );\r\n};\r\n\r\nconst Tabs = createBottomTabNavigator();\r\nconst MainTabs = () => {\r\n  const { isDarkmode } = useTheme();\r\n  return (\r\n    <Tabs.Navigator\r\n      screenOptions={{\r\n        headerShown: false,\r\n        tabBarStyle: {\r\n          borderTopColor: isDarkmode ? themeColor.dark100 : \"#c0c0c0\",\r\n          backgroundColor: isDarkmode ? themeColor.dark200 : \"#ffffff\",\r\n        },\r\n      }}\r\n    >\r\n      {/* these icons using Ionicons */}\r\n      \r\n      <Tabs.Screen\r\n        name=\"Home\"\r\n        component={Home}\r\n        options={{\r\n        \r\n          tabBarLabel: ({ focused }) => (\r\n            <TabBarText focused={focused} title=\"Home\" />\r\n          ),\r\n          tabBarIcon: ({ focused }) => (\r\n            <TabBarIcon focused={focused} icon={\"md-home\"} />\r\n            \r\n          ),\r\n          headerStyle:{\r\n            backgroundColor:\"red\",\r\n          },\r\n          headerTransparent:true,\r\n          headerTintColor: colors.primary,\r\n          \r\n        }}\r\n      /> \r\n      <Tabs.Screen\r\n        name=\"Profile\"\r\n        component={Profile}\r\n        options={{\r\n          tabBarLabel: ({ focused }) => (\r\n            <TabBarText focused={focused} title=\"Profile\" />\r\n          ),\r\n          tabBarIcon: ({ focused }) => (\r\n            <TabBarIcon focused={focused} icon={\"person\"} />\r\n          ),\r\n        }}\r\n      />\r\n     \r\n      <Tabs.Screen\r\n        name=\"Calendar\"\r\n        component={Calendar}\r\n        options={{\r\n          tabBarLabel: ({ focused }) => (\r\n            <TabBarText focused={focused} title=\"Calendar\" />\r\n          ),\r\n          tabBarIcon: ({ focused }) => (\r\n            <TabBarIcon focused={focused} icon={\"calendar\"} />\r\n          ),\r\n        }}\r\n      />\r\n   \r\n      \r\n    \r\n      <Tabs.Screen\r\n        name=\"Notifications\"\r\n        component={Notifications}\r\n        options={{\r\n          tabBarLabel: ({ focused }) => (\r\n            <TabBarText focused={focused} title=\"Notification\" />\r\n          ),\r\n          tabBarIcon: ({ focused }) => (\r\n            <TabBarIcon focused={focused} icon={\"ios-information-circle\"} />\r\n          ),\r\n        }}\r\n      />\r\n    </Tabs.Navigator>\r\n  );\r\n};\r\n\r\nexport default () => {\r\n  return (\r\n    <NavigationContainer>\r\n      <Main />\r\n    </NavigationContainer>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}