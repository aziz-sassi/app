{"ast":null,"code":"import { addDays, getNumberOfDaysInMonth } from \"../utils/date\";\nimport { changedDate, changeMarkedDays, sameDate } from \"../utils/validations\";\nvar MONDAY_FIRST = [6, 0, 1, 2, 3, 4, 5];\n\nfunction dayShouldBeActive(date, startDate, endDate, firstDayOfMonth, lastDayOfMonth) {\n  if (date > lastDayOfMonth) {\n    return endDate > lastDayOfMonth && startDate <= lastDayOfMonth;\n  }\n\n  return startDate < firstDayOfMonth && endDate >= firstDayOfMonth;\n}\n\nexport function getMonthDays(month, year, firstDayMonday, disableRange, disabledDays, disableOffsetDays, startDate, endDate, minDate, maxDate) {\n  if (minDate instanceof Date) minDate.setHours(0, 0, 0, 0);\n  if (maxDate instanceof Date) maxDate.setHours(0, 0, 0, 0);\n  if (startDate instanceof Date) startDate.setHours(0, 0, 0, 0);\n  if (endDate instanceof Date) endDate.setHours(0, 0, 0, 0);\n  var firstMonthDay = new Date(year, month, 1);\n  var lastMonthDay = new Date(year, month + 1, 0);\n  var daysToAdd = getNumberOfDaysInMonth(month, year);\n  var days = [];\n  var startWeekOffset = firstDayMonday ? MONDAY_FIRST[firstMonthDay.getDay()] : firstMonthDay.getDay();\n  var daysToCompleteRows = (startWeekOffset + daysToAdd) % 7;\n  var lastRowNextMonthDays = daysToCompleteRows ? 7 - daysToCompleteRows : 0;\n\n  for (var i = -startWeekOffset; i < daysToAdd + lastRowNextMonthDays; i++) {\n    var date = addDays(firstMonthDay, i);\n    var day = date.getDate();\n    var localMonth = date.getMonth();\n    var fullDay = day < 10 ? \"0\" + day : day.toString();\n    var fullMonth = localMonth < 9 ? \"0\" + (localMonth + 1) : (localMonth + 1).toString();\n    var id = date.getFullYear() + \"-\" + fullMonth + \"-\" + fullDay;\n    var isOnSelectableRange = !minDate && !maxDate;\n    isOnSelectableRange = (!minDate || minDate && date >= minDate) && (!maxDate || maxDate && date <= maxDate);\n    var isOutOfRange = !!(minDate && date < minDate || maxDate && date > maxDate);\n    var isMonthDate = i >= 0 && i < daysToAdd;\n    var isStartDate = false;\n    var isEndDate = false;\n    var isActive = false;\n\n    if (endDate && startDate && !disableRange) {\n      isStartDate = isMonthDate && sameDate(date, startDate);\n      isEndDate = isMonthDate && sameDate(date, endDate);\n\n      if (!isMonthDate) {\n        isActive = dayShouldBeActive(date, startDate, endDate, firstMonthDay, lastMonthDay);\n      } else {\n        isActive = date >= startDate && date <= endDate;\n      }\n    } else if (isMonthDate && startDate && sameDate(date, startDate)) {\n      isStartDate = true;\n      isEndDate = true;\n      isActive = true;\n    }\n\n    var today = new Date();\n    var isToday = day === today.getDate() && localMonth === today.getMonth() && year === today.getFullYear();\n    days.push({\n      key: localMonth + \"-\" + id,\n      id: id,\n      date: date,\n      isToday: isToday,\n      isMonthDate: isMonthDate,\n      isActive: isActive,\n      isStartDate: isStartDate,\n      isEndDate: isEndDate,\n      isOutOfRange: isOutOfRange,\n      isVisible: isOnSelectableRange && isMonthDate && !disabledDays[id],\n      isHidden: disableOffsetDays && !isMonthDate\n    });\n  }\n\n  return days;\n}\nexport function areEqual(prevProps, nextProps) {\n  return prevProps.month === nextProps.month && prevProps.year === nextProps.year && prevProps.locale === nextProps.locale && Array.isArray(prevProps.dayNames) === Array.isArray(nextProps.dayNames) && prevProps.showWeekdays === nextProps.showWeekdays && prevProps.disableRange === nextProps.disableRange && prevProps.disableOffsetDays === nextProps.disableOffsetDays && prevProps.firstDayMonday === nextProps.firstDayMonday && !changeMarkedDays(prevProps.markedDays, nextProps.markedDays) && !changedDate(prevProps.startDate, nextProps.startDate) && !changedDate(prevProps.endDate, nextProps.endDate) && !changedDate(prevProps.minDate, nextProps.minDate) && !changedDate(prevProps.maxDate, nextProps.maxDate);\n}","map":{"version":3,"sources":["utils.tsx"],"names":["MONDAY_FIRST","date","endDate","startDate","minDate","maxDate","firstMonthDay","lastMonthDay","month","daysToAdd","getNumberOfDaysInMonth","days","startWeekOffset","firstDayMonday","daysToCompleteRows","lastRowNextMonthDays","i","addDays","day","localMonth","fullDay","fullMonth","id","isOnSelectableRange","isOutOfRange","isMonthDate","isStartDate","isEndDate","isActive","sameDate","dayShouldBeActive","today","isToday","year","key","isVisible","disabledDays","isHidden","disableOffsetDays","prevProps","nextProps","Array","changeMarkedDays","changedDate"],"mappings":"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","sourcesContent":["import { addDays, getNumberOfDaysInMonth } from '../utils/date';\nimport { changedDate, changeMarkedDays, sameDate } from '../utils/validations';\nimport { MonthProps, DayType } from '../types';\n\nconst MONDAY_FIRST = [6, 0, 1, 2, 3, 4, 5];\n\nfunction dayShouldBeActive(\n  date: Date,\n  startDate: Date,\n  endDate: Date,\n  firstDayOfMonth: Date,\n  lastDayOfMonth: Date\n) {\n  if (date > lastDayOfMonth) {\n    return endDate > lastDayOfMonth && startDate <= lastDayOfMonth;\n  }\n\n  return startDate < firstDayOfMonth && endDate >= firstDayOfMonth;\n}\n\nexport function getMonthDays(\n  month: number,\n  year: number,\n  firstDayMonday: boolean,\n  disableRange: boolean,\n  disabledDays: { [key: string]: any },\n  disableOffsetDays: boolean,\n  startDate?: Date,\n  endDate?: Date,\n  minDate?: Date,\n  maxDate?: Date\n): DayType[] {\n  if (minDate instanceof Date) minDate.setHours(0, 0, 0, 0);\n  if (maxDate instanceof Date) maxDate.setHours(0, 0, 0, 0);\n  if (startDate instanceof Date) startDate.setHours(0, 0, 0, 0);\n  if (endDate instanceof Date) endDate.setHours(0, 0, 0, 0);\n\n  const firstMonthDay = new Date(year, month, 1);\n  const lastMonthDay = new Date(year, month + 1, 0);\n\n  const daysToAdd = getNumberOfDaysInMonth(month, year);\n  const days: DayType[] = [];\n\n  const startWeekOffset = firstDayMonday\n    ? MONDAY_FIRST[firstMonthDay.getDay()]\n    : firstMonthDay.getDay();\n  const daysToCompleteRows = (startWeekOffset + daysToAdd) % 7;\n  const lastRowNextMonthDays = daysToCompleteRows ? 7 - daysToCompleteRows : 0;\n\n  for (let i = -startWeekOffset; i < daysToAdd + lastRowNextMonthDays; i++) {\n    const date: Date = addDays(firstMonthDay, i);\n    const day = date.getDate();\n    const localMonth = date.getMonth();\n    const fullDay = day < 10 ? `0${day}` : day.toString();\n    const fullMonth =\n      localMonth < 9 ? `0${localMonth + 1}` : (localMonth + 1).toString();\n    const id = `${date.getFullYear()}-${fullMonth}-${fullDay}`;\n\n    let isOnSelectableRange = !minDate && !maxDate;\n\n    isOnSelectableRange =\n      (!minDate || (minDate && date >= minDate)) &&\n      (!maxDate || (maxDate && date <= maxDate));\n\n    const isOutOfRange = !!(\n      (minDate && date < minDate) ||\n      (maxDate && date > maxDate)\n    );\n    const isMonthDate = i >= 0 && i < daysToAdd;\n    let isStartDate = false;\n    let isEndDate = false;\n    let isActive = false;\n\n    if (endDate && startDate && !disableRange) {\n      isStartDate = isMonthDate && sameDate(date, startDate);\n      isEndDate = isMonthDate && sameDate(date, endDate);\n\n      if (!isMonthDate) {\n        isActive = dayShouldBeActive(\n          date,\n          startDate,\n          endDate,\n          firstMonthDay,\n          lastMonthDay\n        );\n      } else {\n        isActive = date >= startDate && date <= endDate;\n      }\n    } else if (isMonthDate && startDate && sameDate(date, startDate)) {\n      isStartDate = true;\n      isEndDate = true;\n      isActive = true;\n    }\n\n    const today = new Date();\n    const isToday =\n      day === today.getDate() &&\n      localMonth === today.getMonth() &&\n      year === today.getFullYear();\n\n    days.push({\n      key: `${localMonth}-${id}`,\n      id: id,\n      date,\n      isToday,\n      isMonthDate,\n      isActive,\n      isStartDate,\n      isEndDate,\n      isOutOfRange,\n      isVisible: isOnSelectableRange && isMonthDate && !disabledDays[id],\n      isHidden: disableOffsetDays && !isMonthDate,\n    });\n  }\n\n  return days;\n}\n\nexport function areEqual(prevProps: MonthProps, nextProps: MonthProps) {\n  return (\n    prevProps.month === nextProps.month &&\n    prevProps.year === nextProps.year &&\n    prevProps.locale === nextProps.locale &&\n    Array.isArray(prevProps.dayNames) === Array.isArray(nextProps.dayNames) &&\n    prevProps.showWeekdays === nextProps.showWeekdays &&\n    prevProps.disableRange === nextProps.disableRange &&\n    prevProps.disableOffsetDays === nextProps.disableOffsetDays &&\n    prevProps.firstDayMonday === nextProps.firstDayMonday &&\n    !changeMarkedDays(prevProps.markedDays, nextProps.markedDays) &&\n    !changedDate(prevProps.startDate, nextProps.startDate) &&\n    !changedDate(prevProps.endDate, nextProps.endDate) &&\n    !changedDate(prevProps.minDate, nextProps.minDate) &&\n    !changedDate(prevProps.maxDate, nextProps.maxDate)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}